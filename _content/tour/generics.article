泛型
Go 通过类型参数来支持泛型编程。本节课将展示一些在代码中使用泛型的示例。

项目地址
https://github.com/Go-zh/website

* 类型参数

可以使用类型参数编写 Go 函数来处理多种类型。
函数的类型参数出现在函数参数之前的方括号之间。

  func Index[T comparable](s []T, x T) int

此声明意味着 `s` 是满足内置约束 `comparable` 的任何类型 `T` 的切片。
`x` 也是相同类型的值。

`comparable` 是一个有用的约束，它能让我们对任意满足该类型的值使用 `==`
和 `!=` 运算符。在此示例中，我们使用它将值与所有切片元素进行比较，直到找到匹配项。
该 `Index` 函数适用于任何支持比较的类型。

.play generics/index.go

* 泛型类型

除了泛型函数之外，Go 还支持泛型类型。
类型可以使用类型参数进行参数化，这对于实现通用数据结构非常有用。

此示例展示了能够保存任意类型值的单链表的简单类型声明。

作为练习，请为此链表的实现添加一些功能。

.play generics/list.go

* 恭喜！

你已经完成了本课程！

你可以返回[[/tour/list][模块]]列表看看接下来学习什么，或者继续[[javascript:click('.next-page')][后面的课程]]。
